package com.example.andapp1.ocr

import android.graphics.Bitmap
import android.util.Log
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext

/**
 * OCR Ï≤òÎ¶¨Î•º ÏúÑÌïú ViewModel
 */
class OcrViewModel : ViewModel() {
    
    private val _ocrResult = MutableLiveData<OcrResult>()
    val ocrResult: LiveData<OcrResult> = _ocrResult
    
    private val _isLoading = MutableLiveData<Boolean>()
    val isLoading: LiveData<Boolean> = _isLoading
    
    private val _errorMessage = MutableLiveData<String>()
    val errorMessage: LiveData<String> = _errorMessage
    
    companion object {
        private const val TAG = "OcrViewModel"
    }
    
    /**
     * Ïù¥ÎØ∏ÏßÄ Ï≤òÎ¶¨ Î∞è OCR ÏàòÌñâ
     */
    fun processImage(bitmap: Bitmap, tesseractManager: TesseractManager) {
        viewModelScope.launch {
            _isLoading.value = true
            _errorMessage.value = ""
            
            try {
                withContext(Dispatchers.IO) {
                    Log.d(TAG, "üîç OCR Ï≤òÎ¶¨ ÏãúÏûë...")
                    
                    // Ïù¥ÎØ∏ÏßÄ Ï†ÑÏ≤òÎ¶¨
                    val processedBitmap = ImageUtils.enhanceImageForOCR(bitmap)
                    
                    // ÌÖçÏä§Ìä∏ Ï∂îÏ∂ú
                    val extractedText = tesseractManager.extractText(processedBitmap)
                    Log.d(TAG, "üìÑ Ï∂îÏ∂úÎêú ÌÖçÏä§Ìä∏: $extractedText")
                    
                    // Ïà´Ïûê/Í∏àÏï° Ï∂îÏ∂ú
                    val numbers = tesseractManager.extractNumbers(processedBitmap)
                    val extractedAmount = extractAmountFromText(numbers + extractedText)
                    Log.d(TAG, "üí∞ Ï∂îÏ∂úÎêú Í∏àÏï°: $extractedAmount")
                    
                    // Í≤∞Í≥º ÏÑ§Ï†ï
                    val result = OcrResult(
                        extractedText = extractedText,
                        extractedAmount = extractedAmount,
                        confidence = calculateConfidence(extractedText)
                    )
                    
                    withContext(Dispatchers.Main) {
                        _ocrResult.value = result
                        Log.d(TAG, "‚úÖ OCR Ï≤òÎ¶¨ ÏôÑÎ£å")
                    }
                }
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå OCR Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò Î∞úÏÉù", e)
                withContext(Dispatchers.Main) {
                    _errorMessage.value = "ÌÖçÏä§Ìä∏ Ïù∏ÏãùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§: ${e.message}"
                }
            } finally {
                withContext(Dispatchers.Main) {
                    _isLoading.value = false
                }
            }
        }
    }
    
    /**
     * ÌÖçÏä§Ìä∏ÏóêÏÑú Í∏àÏï° Ï∂îÏ∂ú
     */
    private fun extractAmountFromText(text: String): String {
        try {
            // Í∏àÏï° Ìå®ÌÑ¥ Ï∞æÍ∏∞ (Ïõê, Ïà´Ïûê Ï°∞Ìï©)
            val patterns = listOf(
                Regex("""(\d{1,3}(?:,\d{3})*)\s*Ïõê"""),
                Regex("""(\d{1,3}(?:,\d{3})*)\s*‚Ç©"""),
                Regex("""‚Ç©\s*(\d{1,3}(?:,\d{3})*)"""),
                Regex("""(\d{1,3}(?:,\d{3})*)\s*[Ïõê‚Ç©]"""),
                Regex("""(\d+,\d+)"""),
                Regex("""(\d{3,})""") // ÏµúÏÜå 3ÏûêÎ¶¨ Ïù¥ÏÉÅÏùò Ïà´Ïûê
            )
            
            for (pattern in patterns) {
                val matches = pattern.findAll(text)
                val amounts = matches.map { it.groupValues[1] }.toList()
                
                if (amounts.isNotEmpty()) {
                    // Í∞ÄÏû• ÌÅ∞ Í∏àÏï°ÏùÑ ÏÑ†ÌÉù (ÏùºÎ∞òÏ†ÅÏúºÎ°ú Ï¥ùÏï°Ïù¥ Í∞ÄÏû• ÌÅº)
                    val maxAmount = amounts.maxByOrNull { 
                        it.replace(",", "").toIntOrNull() ?: 0 
                    }
                    if (maxAmount != null) {
                        Log.d(TAG, "üí∞ Ìå®ÌÑ¥ '$pattern'ÏóêÏÑú Í∏àÏï° Ï∂îÏ∂ú: $maxAmount")
                        return maxAmount + "Ïõê"
                    }
                }
            }
            
            return ""
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Í∏àÏï° Ï∂îÏ∂ú Ï§ë Ïò§Î•ò", e)
            return ""
        }
    }
    
    /**
     * OCR Ïã†Î¢∞ÎèÑ Í≥ÑÏÇ∞
     */
    private fun calculateConfidence(text: String): Float {
        return when {
            text.length > 50 -> 0.9f
            text.length > 20 -> 0.7f
            text.length > 10 -> 0.5f
            else -> 0.3f
        }
    }
    
    /**
     * Í≤∞Í≥º Ï¥àÍ∏∞Ìôî
     */
    fun clearResult() {
        _ocrResult.value = OcrResult("", "", 0f)
        _errorMessage.value = ""
    }
}

/**
 * OCR Í≤∞Í≥º Îç∞Ïù¥ÌÑ∞ ÌÅ¥ÎûòÏä§
 */
data class OcrResult(
    val extractedText: String,
    val extractedAmount: String,
    val confidence: Float
) 